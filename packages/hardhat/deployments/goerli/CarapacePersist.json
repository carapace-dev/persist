{
  "address": "0x2c697d6F3a35b694A920895FacE6203Cd39bd1c1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createUpload",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_uploadId",
          "type": "uint256"
        }
      ],
      "name": "deleteFile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_uploadId",
          "type": "uint256"
        }
      ],
      "name": "getUploadInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getUploadsOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_uploadsOfOwner",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_uploadId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uploadDescription",
          "type": "string"
        }
      ],
      "name": "updateUpload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xea5367c2f4819e725a8f37d7000336a30fd1d586109e56dfecfc9fd8574183ac",
  "receipt": {
    "to": null,
    "from": "0x7BB438dF717122Fd04372068FA1A3CB167cB9Dc5",
    "contractAddress": "0x2c697d6F3a35b694A920895FacE6203Cd39bd1c1",
    "transactionIndex": 134,
    "gasUsed": "3326147",
    "logsBloom": "0x
    "blockHash": "0x82e9df419997a37dda2f40dc35506276013f4cd92375a36e1f0941c5f002e9bd",
    "transactionHash": "0xea5367c2f4819e725a8f37d7000336a30fd1d586109e56dfecfc9fd8574183ac",
    "logs": [],
    "blockNumber": 7856040,
    "cumulativeGasUsed": "28667980",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ba1516e6c96a80a75f1d0ea9865e546f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createUpload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uploadId\",\"type\":\"uint256\"}],\"name\":\"deleteFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uploadId\",\"type\":\"uint256\"}],\"name\":\"getUploadInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUploadsOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_uploadsOfOwner\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uploadId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uploadDescription\",\"type\":\"string\"}],\"name\":\"updateUpload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"s ERC721 tokenURI default function\",\"params\":{\"_tokenId\":\"Vault ID\"},\"returns\":{\"_0\":\"_tokenURI String that contains the standard metadata for the token ID\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"??? To be documented\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createUpload()\":{\"notice\":\"??? To be documented\"},\"deleteFile(uint256)\":{\"notice\":\"??? To be documented it is not possible to delete files from Arweave burning NFT (the key) it is impossible to decipher the file data \"},\"getUploadInfo(uint256)\":{\"notice\":\"??? To be documented\"},\"getUploadsOfOwner(address)\":{\"notice\":\"??? To be documented\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the token URI for the NFT (vault) with standardized data\"},\"updateUpload(uint256,string,string)\":{\"notice\":\"??? To be documented\"}},\"notice\":\"??? To be documented\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CarapacePersist.sol\":\"CarapacePersist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/CarapacePersist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/// @title ??? To be documented\\r\\n/// @notice ??? To be documented\\r\\ncontract CarapacePersist is ERC721Enumerable {\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    struct persistParams {\\r\\n        string url;\\r\\n        string uploadDescription;\\r\\n        string nftName;\\r\\n        string nftDescription;\\r\\n        string bigSqrHue;\\r\\n        string smallSqrHue;\\r\\n        string circleHue;\\r\\n        string feetHue;\\r\\n        string textHue;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => persistParams) private persistUploads;\\r\\n\\r\\n    uint256 minUploadtPrice = 0; // public good\\r\\n    // NFT can be burned so must have an independent counter\\r\\n    Counters.Counter private _tokenIdTracker;\\r\\n\\r\\n    constructor() ERC721(\\\"Carapace Persist\\\", \\\"PERSIST\\\") {\\r\\n    }\\r\\n\\r\\n    // Prevents unauthorized access\\r\\n     modifier onlyOwner(uint256 _uploadId) {\\r\\n        _onlyOwner(_uploadId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Restricted to owner\\r\\n    /// OO - Only Owner\\r\\n    function _onlyOwner(uint256 _uploadId) private view {\\r\\n        require(msg.sender == ownerOf(_uploadId), \\\"OO\\\");\\r\\n    }\\r\\n\\r\\n    // Function to receive Ether. msg.data must be empty\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// ??? To be documented\\r\\n    function getUploadsOfOwner(address _owner)  external view returns (uint256[] memory _uploadsOfOwner) {\\r\\n        _uploadsOfOwner = new uint256[](ERC721.balanceOf(_owner));\\r\\n        for (uint256 i=0;i<ERC721.balanceOf(_owner);i++){\\r\\n            _uploadsOfOwner[i] = ERC721Enumerable.tokenOfOwnerByIndex(_owner, i);\\r\\n        }\\r\\n        return _uploadsOfOwner;\\r\\n    }\\r\\n    \\r\\n    /// ??? To be documented\\r\\n    function getUploadInfo(uint256 _uploadId) external view returns (\\r\\n        string memory,\\r\\n        string memory) {\\r\\n        return (\\r\\n            persistUploads[_uploadId].url,\\r\\n            persistUploads[_uploadId].uploadDescription\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns a random number between 0 and 360 to be used only as a color property (not critical)\\r\\n    /// @dev used for hue color property (angle 0-360)\\r\\n    /// @param _mod divisor\\r\\n    /// @param _seed one random part of divident\\r\\n    /// @param _salt one incremental part of divident\\r\\n    /// @return num the divident of the modulos operation\\r\\n    function randomNum(uint256 _mod, uint256 _seed, uint _salt) internal view returns(uint256 num) {\\r\\n        num = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, _seed, _salt))) % _mod;\\r\\n        return num;\\r\\n    }\\r\\n    \\r\\n    /// @notice Returns a string that contains the image SVG code\\r\\n    /// @dev Base64 encoded to be rendered on browser\\r\\n    /// @param _tokenId Upload ID\\r\\n    /// @return svg image string code in Base64 \\r\\n    function buildImage(uint256 _tokenId) private view returns(string memory svg) {\\r\\n        string memory svg1 = string(abi.encodePacked(\\r\\n            '<svg width=\\\"790\\\" height=\\\"806\\\" viewBox=\\\"0 0 790 806\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><mask id=\\\"path-1-inside-1_715_82\\\" fill=\\\"white\\\"><rect x=\\\"154\\\" y=\\\"724\\\" width=\\\"164\\\" height=\\\"82\\\" rx=\\\"20\\\"/></mask>',\\r\\n            '<rect x=\\\"154\\\" y=\\\"724\\\" width=\\\"164\\\" height=\\\"82\\\" rx=\\\"20\\\" fill=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 80%)\\\" stroke=\\\"black\\\" stroke-width=\\\"50\\\" mask=\\\"url(#path-1-inside-1_715_82)\\\"/>',\\r\\n            '<mask id=\\\"path-2-inside-2_715_82\\\" fill=\\\"white\\\"><rect x=\\\"501\\\" y=\\\"724\\\" width=\\\"164\\\" height=\\\"82\\\" rx=\\\"20\\\"/></mask>',\\r\\n            '<rect x=\\\"501\\\" y=\\\"724\\\" width=\\\"164\\\" height=\\\"82\\\" rx=\\\"20\\\" fill=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 80%)\\\" stroke=\\\"black\\\" stroke-width=\\\"50\\\" mask=\\\"url(#path-2-inside-2_715_82)\\\"/>',\\r\\n            '<g filter=\\\"url(#filter0_d_715_82)\\\"><rect x=\\\"36\\\" width=\\\"750\\\" height=\\\"750\\\" rx=\\\"75\\\" fill=\\\"url(#paint0_linear_715_82)\\\" shape-rendering=\\\"crispEdges\\\"/><rect x=\\\"53.5\\\" y=\\\"17.5\\\" width=\\\"715\\\" height=\\\"715\\\" rx=\\\"57.5\\\" stroke=\\\"black\\\" stroke-width=\\\"35\\\" shape-rendering=\\\"crispEdges\\\"/></g><rect x=\\\"153.5\\\" y=\\\"117.5\\\" width=\\\"515\\\" height=\\\"515\\\" rx=\\\"57.5\\\" fill=\\\"url(#paint1_linear_715_82)\\\" stroke=\\\"black\\\" stroke-width=\\\"35\\\"/><circle cx=\\\"411\\\" cy=\\\"375\\\" r=\\\"132.5\\\" fill=\\\"url(#paint2_radial_715_82)\\\" stroke=\\\"black\\\" stroke-width=\\\"35\\\"/><circle cx=\\\"411\\\" cy=\\\"375\\\" r=\\\"45\\\" fill=\\\"black\\\"/><line x1=\\\"410.5\\\" y1=\\\"362.5\\\" x2=\\\"410.5\\\" y2=\\\"207.5\\\" stroke=\\\"black\\\" stroke-width=\\\"25\\\" stroke-linecap=\\\"round\\\"/><line x1=\\\"12.5\\\" y1=\\\"263.5\\\" x2=\\\"12.5\\\" y2=\\\"118.5\\\" stroke=\\\"black\\\" stroke-width=\\\"25\\\" stroke-linecap=\\\"round\\\"/><line x1=\\\"12.5\\\" y1=\\\"618.5\\\" x2=\\\"12.5\\\" y2=\\\"473.5\\\" stroke=\\\"black\\\" stroke-width=\\\"25\\\" stroke-linecap=\\\"round\\\"/><line x1=\\\"406.309\\\" y1=\\\"387.075\\\" x2=\\\"272.075\\\" y2=\\\"464.575\\\" stroke=\\\"black\\\" stroke-width=\\\"25\\\" stroke-linecap=\\\"round\\\"/><line x1=\\\"549.809\\\" y1=\\\"464.575\\\" x2=\\\"415.575\\\" y2=\\\"387.075\\\" stroke=\\\"black\\\" stroke-width=\\\"25\\\" stroke-linecap=\\\"round\\\"/><ellipse cx=\\\"184.5\\\" cy=\\\"149.501\\\" rx=\\\"87.4419\\\" ry=\\\"87.442\\\" transform=\\\"rotate(-89.962 184.5 149.501)\\\" fill=\\\"#010101\\\"/>',\\r\\n            '<line x1=\\\"161.798\\\" y1=\\\"167.902\\\" x2=\\\"186.285\\\" y2=\\\"210.316\\\" stroke=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 60%)\\\" stroke-width=\\\"4\\\"/>'\\r\\n        ));\\r\\n\\r\\n        string memory svg2 = string(abi.encodePacked(\\r\\n            '<line x1=\\\"209.128\\\" y1=\\\"165.781\\\" x2=\\\"184.64\\\" y2=\\\"208.195\\\" stroke=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 60%)\\\" stroke-width=\\\"4\\\"/>',\\r\\n            '<line x1=\\\"138.995\\\" y1=\\\"166.807\\\" x2=\\\"229.889\\\" y2=\\\"166.804\\\" stroke=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 60%)\\\" stroke-width=\\\"4\\\"/>',\\r\\n            '<path d=\\\"M161.243 166.943L137.853 126.429L161.243 85.916H208.024L231.415 126.429L208.024 166.943H161.243Z\\\" stroke=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 60%)\\\" stroke-width=\\\"4\\\"/>',\\r\\n            '<path d=\\\"M161.243 209.322L137.853 168.808L161.243 128.295H208.024L231.415 168.808L208.024 209.322H161.243Z\\\" stroke=\\\"hsl(',persistUploads[_tokenId].feetHue,', 100%, 60%)\\\" stroke-width=\\\"4\\\"/>'\\r\\n        ));\\r\\n\\r\\n        string memory svg3 = string(abi.encodePacked(\\r\\n            '<text text-anchor=\\\"middle\\\" font-family=\\\"Courier New\\\" font-size=\\\"30\\\" x=\\\"50%\\\" y=\\\"86%\\\" fill=\\\"hsl(',persistUploads[_tokenId].textHue,', 100%, 60%)\\\">CARAPACE PERSIST #',_tokenId.toString(),'</text>',\\r\\n            '<defs><filter id=\\\"filter0_d_715_82\\\" x=\\\"32\\\" y=\\\"0\\\" width=\\\"758\\\" height=\\\"758\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"2\\\"/><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_715_82\\\"/><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_715_82\\\" result=\\\"shape\\\"/>',\\r\\n            '</filter><linearGradient id=\\\"paint0_linear_715_82\\\" x1=\\\"411\\\" y1=\\\"0\\\" x2=\\\"411\\\" y2=\\\"750\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\r\\n            '<stop stop-color=\\\"hsl(',persistUploads[_tokenId].bigSqrHue,', 100%, 80%)\\\"/>',\\r\\n            '<stop offset=\\\"1\\\" stop-color=\\\"hsl(',persistUploads[_tokenId].bigSqrHue,', 100%, 80%)\\\" stop-opacity=\\\"0.26\\\"/>',\\r\\n            '</linearGradient><linearGradient id=\\\"paint1_linear_715_82\\\" x1=\\\"411\\\" y1=\\\"100\\\" x2=\\\"411\\\" y2=\\\"650\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\r\\n            '<stop offset=\\\"0.0654761\\\" stop-color=\\\"hsl(',persistUploads[_tokenId].smallSqrHue,', 100%, 80%)\\\" stop-opacity=\\\"0\\\"/>'\\r\\n        ));\\r\\n\\r\\n        string memory svg4 = string(abi.encodePacked(\\r\\n            '<stop offset=\\\"0.992559\\\" stop-color=\\\"hsl(',persistUploads[_tokenId].smallSqrHue,', 100%, 80%)\\\"/>',\\r\\n            '</linearGradient><radialGradient id=\\\"paint2_radial_715_82\\\" cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"1\\\" gradientUnits=\\\"userSpaceOnUse\\\" gradientTransform=\\\"translate(411 375) rotate(90) scale(150)\\\">',\\r\\n            '<stop offset=\\\"0.258184\\\" stop-color=\\\"hsl(',persistUploads[_tokenId].circleHue,', 100%, 80%)\\\" stop-opacity=\\\"0\\\"/>',\\r\\n            '<stop offset=\\\"0.950893\\\" stop-color=\\\"hsl(',persistUploads[_tokenId].circleHue,', 100%, 80%)\\\"/>',\\r\\n            '</radialGradient></defs></svg>'\\r\\n        ));\\r\\n\\r\\n        svg = string(abi.encodePacked(svg1,svg2,svg3,svg4));\\r\\n        \\r\\n        return Base64.encode(bytes(svg));\\r\\n    }\\r\\n    \\r\\n    /// @notice Returns a string that contains the standard metadata for a NFT\\r\\n    /// @dev to override ERC721 tokenURI default function\\r\\n    /// @param _tokenId Upload ID\\r\\n    /// @return metadata string with standard information for a NFT\\r\\n    function buildMetadata(uint256 _tokenId) internal view returns(string memory metadata) {\\r\\n        return string(abi.encodePacked(\\r\\n                'data:application/json;base64,', Base64.encode(bytes(abi.encodePacked(\\r\\n                            '{\\\"name\\\":\\\"', \\r\\n                            persistUploads[_tokenId].nftName,\\r\\n                            '\\\", \\\"description\\\":\\\"', \\r\\n                            persistUploads[_tokenId].nftDescription,\\r\\n                            '\\\", \\\"image\\\": \\\"', \\r\\n                            'data:image/svg+xml;base64,', \\r\\n                            buildImage(_tokenId),\\r\\n                            '\\\"}')))));\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a new NFT and stores the correspondents params data\\r\\n    /// @param _to The owner of upload\\r\\n    /// @param _uploadId Upload ID\\r\\n    function mintPersistUpload(address _to, uint256 _uploadId) private {\\r\\n        persistParams memory newPersistParams = persistParams(\\r\\n            \\\"\\\",\\r\\n            \\\"\\\",\\r\\n            string(abi.encodePacked('Persist #', uint256(_uploadId).toString())), \\r\\n            \\\"Carapace persistent digital assets protection.\\\",\\r\\n            randomNum(361, gasleft(), _uploadId).toString(),\\r\\n            randomNum(361, block.timestamp, _uploadId).toString(),\\r\\n            randomNum(361, block.number, _uploadId).toString(),\\r\\n            randomNum(361, block.gaslimit, _uploadId).toString(),\\r\\n            randomNum(361, tx.gasprice, _uploadId).toString()\\r\\n        );\\r\\n\\r\\n        persistUploads[_uploadId] = newPersistParams;\\r\\n        _safeMint(_to, _uploadId);\\r\\n        _tokenIdTracker.increment();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the token URI for the NFT (vault) with standardized data\\r\\n    /// @dev s ERC721 tokenURI default function\\r\\n    /// @param _tokenId Vault ID\\r\\n    /// @return _tokenURI String that contains the standard metadata for the token ID\\r\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\r\\n      require(_exists(_tokenId),\\\"NT\\\");\\r\\n      return buildMetadata(_tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to an address\\r\\n    /// @param _to Address to send ETH\\r\\n    /// @param _amount Value in ETH to be transferred\\r\\n    /// @return transfered false if failed, or true if succeeded\\r\\n    function transferETH(address _to, uint256 _amount) private returns (bool transfered) {\\r\\n        (transfered, ) = payable(_to).call{value: _amount}(\\\"\\\");\\r\\n        require(transfered, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    /// ??? To be documented\\r\\n    function createUpload() external payable {\\r\\n        require(msg.value >= minUploadtPrice, \\\"MP\\\");\\r\\n        uint256 _uploadId = _tokenIdTracker.current();\\r\\n\\r\\n        // mint NFT\\r\\n        mintPersistUpload(msg.sender, _uploadId);\\r\\n    }\\r\\n\\r\\n    /// ??? To be documented\\r\\n    function updateUpload(\\r\\n        uint256 _uploadId,        \\r\\n        string memory _url,\\r\\n        string memory _uploadDescription\\r\\n    ) external onlyOwner(_uploadId) {\\r\\n        persistUploads[_uploadId].url = _url;\\r\\n        persistUploads[_uploadId].uploadDescription = _uploadDescription;\\r\\n    }\\r\\n\\r\\n    /// ??? To be documented\\r\\n    /// it is not possible to delete files from Arweave\\r\\n    /// burning NFT (the key) it is impossible to decipher the file data\\r\\n    /// \\r\\n    function deleteFile(\\r\\n        uint256 _uploadId\\r\\n    ) external onlyOwner(_uploadId) {\\r\\n        // burn NFT\\r\\n        _burn(_uploadId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x83c9ecdecccb87bec71fc2635ff633e2d330f635c38914620f77bce5221e9ea2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000600b553480156200001657600080fd5b50604080518082018252601081526f10d85c985c1858d94814195c9cda5cdd60821b60208083019182528351808501909452600784526614115494d254d560ca1b9084015281519192916200006e916000916200008d565b508051620000849060019060208401906200008d565b50505062000170565b8280546200009b9062000133565b90600052602060002090601f016020900481019282620000bf57600085556200010a565b82601f10620000da57805160ff19168380011785556200010a565b828001600101855582156200010a579182015b828111156200010a578251825591602001919060010190620000ed565b50620001189291506200011c565b5090565b5b808211156200011857600081556001016200011d565b600181811c908216806200014857607f821691505b602082108114156200016a57634e487b7160e01b600052602260045260246000fd5b50919050565b613a3c80620001806000396000f3fe60806040526004361061012e5760003560e01c806370a08231116100ab578063c5b420061161006f578063c5b420061461033f578063c87b56dd1461035f578063d5e350541461037f578063e985e9c5146103ad578063efeb7434146103f6578063fbc7d2691461042357600080fd5b806370a08231146102aa57806395d89b41146102ca578063a22cb465146102df578063aa35a853146102ff578063b88d4fde1461031f57600080fd5b806323b872dd116100f257806323b872dd1461020a5780632f745c591461022a57806342842e0e1461024a5780634f6ccce71461026a5780636352211e1461028a57600080fd5b806301ffc9a71461013a57806306fdde031461016f578063081812fc14610191578063095ea7b3146101c957806318160ddd146101eb57600080fd5b3661013557005b600080fd5b34801561014657600080fd5b5061015a610155366004611da5565b61042b565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b50610184610456565b6040516101669190611e21565b34801561019d57600080fd5b506101b16101ac366004611e34565b6104e8565b6040516001600160a01b039091168152602001610166565b3480156101d557600080fd5b506101e96101e4366004611e69565b610582565b005b3480156101f757600080fd5b506008545b604051908152602001610166565b34801561021657600080fd5b506101e9610225366004611e93565b610698565b34801561023657600080fd5b506101fc610245366004611e69565b6106c9565b34801561025657600080fd5b506101e9610265366004611e93565b61075f565b34801561027657600080fd5b506101fc610285366004611e34565b61077a565b34801561029657600080fd5b506101b16102a5366004611e34565b61080d565b3480156102b657600080fd5b506101fc6102c5366004611ecf565b610884565b3480156102d657600080fd5b5061018461090b565b3480156102eb57600080fd5b506101e96102fa366004611eea565b61091a565b34801561030b57600080fd5b506101e961031a366004611fd2565b610929565b34801561032b57600080fd5b506101e961033a36600461203f565b61097f565b34801561034b57600080fd5b506101e961035a366004611e34565b6109b7565b34801561036b57600080fd5b5061018461037a366004611e34565b6109ca565b34801561038b57600080fd5b5061039f61039a366004611e34565b610a1f565b6040516101669291906120bb565b3480156103b957600080fd5b5061015a6103c83660046120e9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561040257600080fd5b50610416610411366004611ecf565b610b59565b604051610166919061211c565b6101e9610bfa565b60006001600160e01b0319821663780e9d6360e01b1480610450575061045082610c4b565b92915050565b60606000805461046590612160565b80601f016020809104026020016040519081016040528092919081815260200182805461049190612160565b80156104de5780601f106104b3576101008083540402835291602001916104de565b820191906000526020600020905b8154815290600101906020018083116104c157829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166105665760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061058d8261080d565b9050806001600160a01b0316836001600160a01b031614156105fb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161055d565b336001600160a01b0382161480610617575061061781336103c8565b6106895760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161055d565b6106938383610c9b565b505050565b6106a23382610d09565b6106be5760405162461bcd60e51b815260040161055d90612195565b610693838383610e00565b60006106d483610884565b82106107365760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161055d565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106938383836040518060200160405280600081525061097f565b600061078560085490565b82106107e85760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161055d565b600882815481106107fb576107fb6121e6565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806104505760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161055d565b60006001600160a01b0382166108ef5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161055d565b506001600160a01b031660009081526003602052604090205490565b60606001805461046590612160565b610925338383610fa7565b5050565b8261093381611076565b6000848152600a60209081526040909120845161095292860190611cf6565b506000848152600a60209081526040909120835161097892600190920191850190611cf6565b5050505050565b6109893383610d09565b6109a55760405162461bcd60e51b815260040161055d90612195565b6109b1848484846110c4565b50505050565b806109c181611076565b610925826110f7565b6000818152600260205260409020546060906001600160a01b0316610a165760405162461bcd60e51b8152602060048201526002602482015261139560f21b604482015260640161055d565b6104508261119e565b6000818152600a602052604090208054606091829160018201908290610a4490612160565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7090612160565b8015610abd5780601f10610a9257610100808354040283529160200191610abd565b820191906000526020600020905b815481529060010190602001808311610aa057829003601f168201915b50505050509150808054610ad090612160565b80601f0160208091040260200160405190810160405280929190818152602001828054610afc90612160565b8015610b495780601f10610b1e57610100808354040283529160200191610b49565b820191906000526020600020905b815481529060010190602001808311610b2c57829003601f168201915b5050505050905091509150915091565b6060610b6482610884565b67ffffffffffffffff811115610b7c57610b7c611f26565b604051908082528060200260200182016040528015610ba5578160200160208202803683370190505b50905060005b610bb483610884565b811015610bf457610bc583826106c9565b828281518110610bd757610bd76121e6565b602090810291909101015280610bec81612212565b915050610bab565b50919050565b600b54341015610c315760405162461bcd60e51b815260206004820152600260248201526104d560f41b604482015260640161055d565b6000610c3c600c5490565b9050610c483382611210565b50565b60006001600160e01b031982166380ac58cd60e01b1480610c7c57506001600160e01b03198216635b5e139f60e01b145b8061045057506301ffc9a760e01b6001600160e01b0319831614610450565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610cd08261080d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610d825760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161055d565b6000610d8d8361080d565b9050806001600160a01b0316846001600160a01b03161480610dd457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610df85750836001600160a01b0316610ded846104e8565b6001600160a01b0316145b949350505050565b826001600160a01b0316610e138261080d565b6001600160a01b031614610e775760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161055d565b6001600160a01b038216610ed95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161055d565b610ee4838383611414565b610eef600082610c9b565b6001600160a01b0383166000908152600360205260408120805460019290610f1890849061222d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610f46908490612244565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031614156110095760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161055d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61107f8161080d565b6001600160a01b0316336001600160a01b031614610c485760405162461bcd60e51b81526020600482015260026024820152614f4f60f01b604482015260640161055d565b6110cf848484610e00565b6110db848484846114cc565b6109b15760405162461bcd60e51b815260040161055d9061225c565b60006111028261080d565b905061111081600084611414565b61111b600083610c9b565b6001600160a01b038116600090815260036020526040812080546001929061114490849061222d565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600a602052604090206060906111ea9060028101906003016111c4856115ca565b6040516020016111d693929190612348565b60405160208183030381529060405261170a565b6040516020016111fa91906123f6565b6040516020818303038152906040529050919050565b604080516101408101825260006101208201818152825282516020818101855282825283015291810161124284611870565b604051602001611252919061243b565b60405160208183030381529060405281526020016040518060600160405280602e81526020016139d9602e913981526020016112996112946101695a8761196e565b611870565b81526020016112ae611294610169428761196e565b81526020016112c3611294610169438761196e565b81526020016112d8611294610169458761196e565b81526020016112ed6112946101693a8761196e565b90526000838152600a60209081526040909120825180519394508493919261131a92849290910190611cf6565b5060208281015180516113339260018501920190611cf6565b506040820151805161134f916002840191602090910190611cf6565b506060820151805161136b916003840191602090910190611cf6565b5060808201518051611387916004840191602090910190611cf6565b5060a082015180516113a3916005840191602090910190611cf6565b5060c082015180516113bf916006840191602090910190611cf6565b5060e082015180516113db916007840191602090910190611cf6565b5061010082015180516113f8916008840191602090910190611cf6565b5090505061140683836119cb565b610693600c80546001019055565b6001600160a01b03831661146f5761146a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611492565b816001600160a01b0316836001600160a01b0316146114925761149283826119e5565b6001600160a01b0382166114a95761069381611a82565b826001600160a01b0316826001600160a01b031614610693576106938282611b31565b60006001600160a01b0384163b156115bf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061151090339089908890889060040161246c565b6020604051808303816000875af192505050801561154b575060408051601f3d908101601f191682019092526115489181019061249f565b60015b6115a5573d808015611579576040519150601f19603f3d011682016040523d82523d6000602084013e61157e565b606091505b50805161159d5760405162461bcd60e51b815260040161055d9061225c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610df8565b506001949350505050565b6000818152600a602090815260408083209051606093926115f3926007019182918291016124bc565b60408051601f198184030181528282526000868152600a60209081529281209194509261162c9260079092019182918291829101612e38565b60408051601f198184030181529181526000868152600a6020529081209192509060080161165986611870565b6000878152600a60209081526040918290209151611686949392600481019283926005909201910161308a565b60408051601f198184030181528282526000888152600a6020908152928120919450926116be926005830192600601918291016136f1565b6040516020818303038152906040529050838383836040516020016116e694939291906138ce565b60405160208183030381529060405294506117008561170a565b9695505050505050565b606081516000141561172a57505060408051602081019091526000815290565b600060405180606001604052806040815260200161399960409139905060006003845160026117599190612244565b611763919061393b565b61176e90600461394f565b9050600061177d826020612244565b67ffffffffffffffff81111561179557611795611f26565b6040519080825280601f01601f1916602001820160405280156117bf576020820181803683370190505b509050818152600183018586518101602084015b8183101561182b576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253506001016117d3565b600389510660018114611845576002811461185657611862565b613d3d60f01b600119830152611862565b603d60f81b6000198301525b509398975050505050505050565b6060816118945750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118be57806118a881612212565b91506118b79050600a8361393b565b9150611898565b60008167ffffffffffffffff8111156118d9576118d9611f26565b6040519080825280601f01601f191660200182016040528015611903576020820181803683370190505b5090505b8415610df85761191860018361222d565b9150611925600a8661396e565b611930906030612244565b60f81b818381518110611945576119456121e6565b60200101906001600160f81b031916908160001a905350611967600a8661393b565b9450611907565b604080514260208201526bffffffffffffffffffffffff193360601b1691810191909152605481018390526074810182905260009084906094016040516020818303038152906040528051906020012060001c610df8919061396e565b610925828260405180602001604052806000815250611b75565b600060016119f284610884565b6119fc919061222d565b600083815260076020526040902054909150808214611a4f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611a949060019061222d565b60008381526009602052604081205460088054939450909284908110611abc57611abc6121e6565b906000526020600020015490508060088381548110611add57611add6121e6565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611b1557611b15613982565b6001900381819060005260206000200160009055905550505050565b6000611b3c83610884565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b611b7f8383611ba8565b611b8c60008484846114cc565b6106935760405162461bcd60e51b815260040161055d9061225c565b6001600160a01b038216611bfe5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161055d565b6000818152600260205260409020546001600160a01b031615611c635760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161055d565b611c6f60008383611414565b6001600160a01b0382166000908152600360205260408120805460019290611c98908490612244565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611d0290612160565b90600052602060002090601f016020900481019282611d245760008555611d6a565b82601f10611d3d57805160ff1916838001178555611d6a565b82800160010185558215611d6a579182015b82811115611d6a578251825591602001919060010190611d4f565b50611d76929150611d7a565b5090565b5b80821115611d765760008155600101611d7b565b6001600160e01b031981168114610c4857600080fd5b600060208284031215611db757600080fd5b8135611dc281611d8f565b9392505050565b60005b83811015611de4578181015183820152602001611dcc565b838111156109b15750506000910152565b60008151808452611e0d816020860160208601611dc9565b601f01601f19169290920160200192915050565b602081526000611dc26020830184611df5565b600060208284031215611e4657600080fd5b5035919050565b80356001600160a01b0381168114611e6457600080fd5b919050565b60008060408385031215611e7c57600080fd5b611e8583611e4d565b946020939093013593505050565b600080600060608486031215611ea857600080fd5b611eb184611e4d565b9250611ebf60208501611e4d565b9150604084013590509250925092565b600060208284031215611ee157600080fd5b611dc282611e4d565b60008060408385031215611efd57600080fd5b611f0683611e4d565b915060208301358015158114611f1b57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611f5757611f57611f26565b604051601f8501601f19908116603f01168101908282118183101715611f7f57611f7f611f26565b81604052809350858152868686011115611f9857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611fc357600080fd5b611dc283833560208501611f3c565b600080600060608486031215611fe757600080fd5b83359250602084013567ffffffffffffffff8082111561200657600080fd5b61201287838801611fb2565b9350604086013591508082111561202857600080fd5b5061203586828701611fb2565b9150509250925092565b6000806000806080858703121561205557600080fd5b61205e85611e4d565b935061206c60208601611e4d565b925060408501359150606085013567ffffffffffffffff81111561208f57600080fd5b8501601f810187136120a057600080fd5b6120af87823560208401611f3c565b91505092959194509250565b6040815260006120ce6040830185611df5565b82810360208401526120e08185611df5565b95945050505050565b600080604083850312156120fc57600080fd5b61210583611e4d565b915061211360208401611e4d565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561215457835183529284019291840191600101612138565b50909695505050505050565b600181811c9082168061217457607f821691505b60208210811415610bf457634e487b7160e01b600052602260045260246000fd5b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612226576122266121fc565b5060010190565b60008282101561223f5761223f6121fc565b500390565b60008219821115612257576122576121fc565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c90808316806122c857607f831692505b60208084108214156122ea57634e487b7160e01b600052602260045260246000fd5b8180156122fe576001811461230f5761233c565b60ff1986168952848901965061233c565b60008881526020902060005b868110156123345781548b82015290850190830161231b565b505084890196505b50505050505092915050565b683d913730b6b2911d1160b91b8152600061236660098301866122ae565b71111610113232b9b1b934b83a34b7b7111d1160711b815261238b60128201866122ae565b6c1116101134b6b0b3b2911d101160991b81527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600d82015284519091506123da816027840160208801611dc9565b61227d60f01b6027929091019182015260290195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161242e81601d850160208701611dc9565b91909101601d0192915050565b6850657273697374202360b81b81526000825161245f816009850160208701611dc9565b9190910160090192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061170090830184611df5565b6000602082840312156124b157600080fd5b8151611dc281611d8f565b7f3c7376672077696474683d2237393022206865696768743d223830362220766981527f6577426f783d223020302037393020383036222066696c6c3d226e6f6e65222060208201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660408201527f67223e3c6d61736b2069643d22706174682d312d696e736964652d315f37313560608201527f5f3832222066696c6c3d227768697465223e3c7265637420783d22313534222060808201527f793d22373234222077696474683d2231363422206865696768743d223832222060a08201526f393c1e91191811179f1e17b6b0b9b59f60811b60c08201527f3c7265637420783d223135342220793d22373234222077696474683d2231363460d08201527f22206865696768743d223832222072783d223230222066696c6c3d2268736c2860f082015260006120e0612e0f612e09612dab6127e561277961277361272461269961262d6101108c018f6122ae565b7f2c20313030252c203830252922207374726f6b653d22626c61636b222073747281527f6f6b652d77696474683d22353022206d61736b3d2275726c2823706174682d3160208201527316b4b739b4b2329698af9b989aaf9c191491179f60611b604082015260540190565b7f3c6d61736b2069643d22706174682d322d696e736964652d325f3731355f383281527f222066696c6c3d227768697465223e3c7265637420783d223530312220793d2260208201527f373234222077696474683d2231363422206865696768743d223832222072783d60408201526c11191811179f1e17b6b0b9b59f60991b6060820152606d0190565b7f3c7265637420783d223530312220793d22373234222077696474683d2231363481527f22206865696768743d223832222072783d223230222066696c6c3d2268736c28602082015260400190565b8a6122ae565b7f2c20313030252c203830252922207374726f6b653d22626c61636b222073747281527f6f6b652d77696474683d22353022206d61736b3d2275726c2823706174682d3260208201527316b4b739b4b23296992f9b989aaf9c191491179f60611b604082015260540190565b7f3c672066696c7465723d2275726c282366696c746572305f645f3731355f383281527f29223e3c7265637420783d223336222077696474683d2237353022206865696760208201527f68743d22373530222072783d223735222066696c6c3d2275726c28237061696e60408201527f74305f6c696e6561725f3731355f383229222073686170652d72656e6465726960608201527f6e673d2263726973704564676573222f3e3c7265637420783d2235332e35222060808201527f793d2231372e35222077696474683d2237313522206865696768743d2237313560a08201527f222072783d2235372e3522207374726f6b653d22626c61636b22207374726f6b60c08201527f652d77696474683d223335222073686170652d72656e646572696e673d22637260e08201527f6973704564676573222f3e3c2f673e3c7265637420783d223135332e352220796101008201527f3d223131372e35222077696474683d2235313522206865696768743d223531356101208201527f222072783d2235372e35222066696c6c3d2275726c28237061696e74315f6c696101408201527f6e6561725f3731355f38322922207374726f6b653d22626c61636b22207374726101608201527f6f6b652d77696474683d223335222f3e3c636972636c652063783d22343131226101808201527f2063793d223337352220723d223133322e35222066696c6c3d2275726c2823706101a08201527f61696e74325f72616469616c5f3731355f38322922207374726f6b653d22626c6101c08201527f61636b22207374726f6b652d77696474683d223335222f3e3c636972636c65206101e08201527f63783d22343131222063793d223337352220723d223435222066696c6c3d22626102008201527f6c61636b222f3e3c6c696e652078313d223431302e35222079313d223336322e6102208201527f35222078323d223431302e35222079323d223230372e3522207374726f6b653d6102408201527f22626c61636b22207374726f6b652d77696474683d22323522207374726f6b656102608201527f2d6c696e656361703d22726f756e64222f3e3c6c696e652078313d2231322e356102808201527f222079313d223236332e35222078323d2231322e35222079323d223131382e356102a08201527f22207374726f6b653d22626c61636b22207374726f6b652d77696474683d22326102c08201527f3522207374726f6b652d6c696e656361703d22726f756e64222f3e3c6c696e656102e08201527f2078313d2231322e35222079313d223631382e35222078323d2231322e3522206103008201527f79323d223437332e3522207374726f6b653d22626c61636b22207374726f6b656103208201527f2d77696474683d22323522207374726f6b652d6c696e656361703d22726f756e6103408201527f64222f3e3c6c696e652078313d223430362e333039222079313d223338372e306103608201527f3735222078323d223237322e303735222079323d223436342e353735222073746103808201527f726f6b653d22626c61636b22207374726f6b652d77696474683d2232352220736103a08201527f74726f6b652d6c696e656361703d22726f756e64222f3e3c6c696e652078313d6103c08201527f223534392e383039222079313d223436342e353735222078323d223431352e356103e08201527f3735222079323d223338372e30373522207374726f6b653d22626c61636b22206104008201527f7374726f6b652d77696474683d22323522207374726f6b652d6c696e656361706104208201527f3d22726f756e64222f3e3c656c6c697073652063783d223138342e35222063796104408201527f3d223134392e353031222072783d2238372e34343139222072793d2238372e346104608201527f343222207472616e73666f726d3d22726f74617465282d38392e3936322031386104808201527f342e35203134392e35303129222066696c6c3d2223303130313031222f3e00006104a08201526104be0190565b7f3c6c696e652078313d223136312e373938222079313d223136372e393032222081527f78323d223138362e323835222079323d223231302e33313622207374726f6b6560208201526507a44d0e6d8560d31b604082015260460190565b856122ae565b7f2c20313030252c203630252922207374726f6b652d77696474683d2234222f3e815260200190565b7f3c6c696e652078313d223230392e313238222079313d223136352e373831222081527f78323d223138342e3634222079323d223230382e31393522207374726f6b653d602082015264044d0e6d8560db1b60408201526000612e9e60458301876122ae565b7f2c20313030252c203630252922207374726f6b652d77696474683d2234222f3e8082527f3c6c696e652078313d223133382e393935222079313d223136362e383037222060208301527f78323d223232392e383839222079323d223136362e38303422207374726f6b6560408301526507a44d0e6d8560d31b6060830152612f2a60668301886122ae565b9081527f3c7061746820643d224d3136312e323433203136362e3934334c3133372e383560208201527f33203132362e3432394c3136312e3234332038352e393136483230382e30323460408201527f4c3233312e343135203132362e3432394c3230382e303234203136362e39343360608201527f483136312e3234335a22207374726f6b653d2268736c280000000000000000006080820152905061307f612e0f613079612fde82609786018a6122ae565b7f3c7061746820643d224d3136312e323433203230392e3332324c3133372e383581527f33203136382e3830384c3136312e323433203132382e323935483230382e303260208201527f344c3233312e343135203136382e3830384c3230382e303234203230392e333260408201527f32483136312e3234335a22207374726f6b653d2268736c280000000000000000606082015260780190565b866122ae565b979650505050505050565b7f3c7465787420746578742d616e63686f723d226d6964646c652220666f6e742d81527f66616d696c793d22436f7572696572204e65772220666f6e742d73697a653d2260208201527f33302220783d223530252220793d22383625222066696c6c3d2268736c28000060408201526000613108605e8301886122ae565b7f2c20313030252c2036302529223e4341524150414345205045525349535420238152865161313e816020840160208b01611dc9565b661e17ba32bc3a1f60c91b910160208101919091527f3c646566733e3c66696c7465722069643d2266696c746572305f645f3731355f60278201527f38322220783d2233322220793d2230222077696474683d22373538222068656960478201527f6768743d22373538222066696c746572556e6974733d2275736572537061636560678201527f4f6e5573652220636f6c6f722d696e746572706f6c6174696f6e2d66696c746560878201527f72733d2273524742223e3c6665466c6f6f6420666c6f6f642d6f70616369747960a78201527f3d22302220726573756c743d224261636b67726f756e64496d6167654669782260c78201527f2f3e3c6665436f6c6f724d617472697820696e3d22536f75726365416c70686160e78201527f2220747970653d226d6174726978222076616c7565733d2230203020302030206101078201527f30203020302030203020302030203020302030203020302030203020313237206101278201527f302220726573756c743d2268617264416c706861222f3e3c66654f66667365746101478201527f2064793d2234222f3e3c6665476175737369616e426c757220737464446576696101678201527f6174696f6e3d2232222f3e3c6665436f6d706f7369746520696e323d226861726101878201527f64416c70686122206f70657261746f723d226f7574222f3e3c6665436f6c6f726101a78201527f4d617472697820747970653d226d6174726978222076616c7565733d223020306101c78201527f20302030203020302030203020302030203020302030203020302030203020306101e78201527f20302e32352030222f3e3c6665426c656e64206d6f64653d226e6f726d616c226102078201527f20696e323d224261636b67726f756e64496d6167654669782220726573756c746102278201527f3d22656666656374315f64726f70536861646f775f3731355f3832222f3e3c666102478201527f65426c656e64206d6f64653d226e6f726d616c2220696e3d22536f75726365476102678201527f7261706869632220696e323d22656666656374315f64726f70536861646f775f6102878201527f3731355f38322220726573756c743d227368617065222f3e00000000000000006102a78201527f3c2f66696c7465723e3c6c696e6561724772616469656e742069643d227061696102bf8201527f6e74305f6c696e6561725f3731355f3832222078313d22343131222079313d226102df8201527f30222078323d22343131222079323d2237353022206772616469656e74556e696102ff820152733a399e913ab9b2b929b830b1b2a7b72ab9b2911f60611b61031f8201526136e56136bc6130796136816135e66135b16135ab61357861355d6135576103338b0175078e6e8dee040e6e8dee05ac6ded8dee47a44d0e6d8560531b815260160190565b8f6122ae565b6e16101898181296101c18129491179f60891b8152600f0190565b7f3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2268736c8152600560fb1b602082015260210190565b8b6122ae565b7f2c20313030252c2038302529222073746f702d6f7061636974793d22302e323681526211179f60e91b602082015260230190565b7f3c2f6c696e6561724772616469656e743e3c6c696e6561724772616469656e7481527f2069643d227061696e74315f6c696e6561725f3731355f3832222078313d223460208201527f3131222079313d22313030222078323d22343131222079323d2236353022206760408201527f72616469656e74556e6974733d227573657253706163654f6e557365223e00006060820152607e0190565b7f3c73746f70206f66667365743d22302e30363534373631222073746f702d636f8152680d8dee47a44d0e6d8560bb1b602082015260290190565b7f2c20313030252c2038302529222073746f702d6f7061636974793d2230222f3e815260200190565b98975050505050505050565b7f3c73746f70206f66667365743d22302e393932353539222073746f702d636f6c81526000670dee47a44d0e6d8560c31b80602084015261373560288401876122ae565b6e16101898181296101c18129491179f60891b81527f3c2f6c696e6561724772616469656e743e3c72616469616c4772616469656e74600f8201527f2069643d227061696e74325f72616469616c5f3731355f3832222063783d2230602f8201527f222063793d22302220723d223122206772616469656e74556e6974733d227573604f8201527f657253706163654f6e55736522206772616469656e745472616e73666f726d3d606f8201527f227472616e736c61746528343131203337352920726f74617465283930292073608f8201526a31b0b63294189a9814911f60a91b60af8201527f3c73746f70206f66667365743d22302e323538313834222073746f702d636f6c60ba82015260da810182905261307f6138a561355d61389f6138656136bc60e287018c6122ae565b7f3c73746f70206f66667365743d22302e393530383933222073746f702d636f6c8152670dee47a44d0e6d8560c31b602082015260280190565b886122ae565b7f3c2f72616469616c4772616469656e743e3c2f646566733e3c2f7376673e00008152601e0190565b600085516138e0818460208a01611dc9565b8551908301906138f4818360208a01611dc9565b8551910190613907818360208901611dc9565b845191019061391a818360208801611dc9565b019695505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261394a5761394a613925565b500490565b6000816000190483118215151615613969576139696121fc565b500290565b60008261397d5761397d613925565b500690565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f43617261706163652070657273697374656e74206469676974616c206173736574732070726f74656374696f6e2ea264697066735822122023367e6a3778fd323c0d12139a3468a45446e302cfd553fc54ccc6614401735064736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c806370a08231116100ab578063c5b420061161006f578063c5b420061461033f578063c87b56dd1461035f578063d5e350541461037f578063e985e9c5146103ad578063efeb7434146103f6578063fbc7d2691461042357600080fd5b806370a08231146102aa57806395d89b41146102ca578063a22cb465146102df578063aa35a853146102ff578063b88d4fde1461031f57600080fd5b806323b872dd116100f257806323b872dd1461020a5780632f745c591461022a57806342842e0e1461024a5780634f6ccce71461026a5780636352211e1461028a57600080fd5b806301ffc9a71461013a57806306fdde031461016f578063081812fc14610191578063095ea7b3146101c957806318160ddd146101eb57600080fd5b3661013557005b600080fd5b34801561014657600080fd5b5061015a610155366004611da5565b61042b565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b50610184610456565b6040516101669190611e21565b34801561019d57600080fd5b506101b16101ac366004611e34565b6104e8565b6040516001600160a01b039091168152602001610166565b3480156101d557600080fd5b506101e96101e4366004611e69565b610582565b005b3480156101f757600080fd5b506008545b604051908152602001610166565b34801561021657600080fd5b506101e9610225366004611e93565b610698565b34801561023657600080fd5b506101fc610245366004611e69565b6106c9565b34801561025657600080fd5b506101e9610265366004611e93565b61075f565b34801561027657600080fd5b506101fc610285366004611e34565b61077a565b34801561029657600080fd5b506101b16102a5366004611e34565b61080d565b3480156102b657600080fd5b506101fc6102c5366004611ecf565b610884565b3480156102d657600080fd5b5061018461090b565b3480156102eb57600080fd5b506101e96102fa366004611eea565b61091a565b34801561030b57600080fd5b506101e961031a366004611fd2565b610929565b34801561032b57600080fd5b506101e961033a36600461203f565b61097f565b34801561034b57600080fd5b506101e961035a366004611e34565b6109b7565b34801561036b57600080fd5b5061018461037a366004611e34565b6109ca565b34801561038b57600080fd5b5061039f61039a366004611e34565b610a1f565b6040516101669291906120bb565b3480156103b957600080fd5b5061015a6103c83660046120e9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561040257600080fd5b50610416610411366004611ecf565b610b59565b604051610166919061211c565b6101e9610bfa565b60006001600160e01b0319821663780e9d6360e01b1480610450575061045082610c4b565b92915050565b60606000805461046590612160565b80601f016020809104026020016040519081016040528092919081815260200182805461049190612160565b80156104de5780601f106104b3576101008083540402835291602001916104de565b820191906000526020600020905b8154815290600101906020018083116104c157829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166105665760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061058d8261080d565b9050806001600160a01b0316836001600160a01b031614156105fb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161055d565b336001600160a01b0382161480610617575061061781336103c8565b6106895760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161055d565b6106938383610c9b565b505050565b6106a23382610d09565b6106be5760405162461bcd60e51b815260040161055d90612195565b610693838383610e00565b60006106d483610884565b82106107365760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161055d565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106938383836040518060200160405280600081525061097f565b600061078560085490565b82106107e85760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161055d565b600882815481106107fb576107fb6121e6565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806104505760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161055d565b60006001600160a01b0382166108ef5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161055d565b506001600160a01b031660009081526003602052604090205490565b60606001805461046590612160565b610925338383610fa7565b5050565b8261093381611076565b6000848152600a60209081526040909120845161095292860190611cf6565b506000848152600a60209081526040909120835161097892600190920191850190611cf6565b5050505050565b6109893383610d09565b6109a55760405162461bcd60e51b815260040161055d90612195565b6109b1848484846110c4565b50505050565b806109c181611076565b610925826110f7565b6000818152600260205260409020546060906001600160a01b0316610a165760405162461bcd60e51b8152602060048201526002602482015261139560f21b604482015260640161055d565b6104508261119e565b6000818152600a602052604090208054606091829160018201908290610a4490612160565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7090612160565b8015610abd5780601f10610a9257610100808354040283529160200191610abd565b820191906000526020600020905b815481529060010190602001808311610aa057829003601f168201915b50505050509150808054610ad090612160565b80601f0160208091040260200160405190810160405280929190818152602001828054610afc90612160565b8015610b495780601f10610b1e57610100808354040283529160200191610b49565b820191906000526020600020905b815481529060010190602001808311610b2c57829003601f168201915b5050505050905091509150915091565b6060610b6482610884565b67ffffffffffffffff811115610b7c57610b7c611f26565b604051908082528060200260200182016040528015610ba5578160200160208202803683370190505b50905060005b610bb483610884565b811015610bf457610bc583826106c9565b828281518110610bd757610bd76121e6565b602090810291909101015280610bec81612212565b915050610bab565b50919050565b600b54341015610c315760405162461bcd60e51b815260206004820152600260248201526104d560f41b604482015260640161055d565b6000610c3c600c5490565b9050610c483382611210565b50565b60006001600160e01b031982166380ac58cd60e01b1480610c7c57506001600160e01b03198216635b5e139f60e01b145b8061045057506301ffc9a760e01b6001600160e01b0319831614610450565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610cd08261080d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610d825760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161055d565b6000610d8d8361080d565b9050806001600160a01b0316846001600160a01b03161480610dd457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610df85750836001600160a01b0316610ded846104e8565b6001600160a01b0316145b949350505050565b826001600160a01b0316610e138261080d565b6001600160a01b031614610e775760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161055d565b6001600160a01b038216610ed95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161055d565b610ee4838383611414565b610eef600082610c9b565b6001600160a01b0383166000908152600360205260408120805460019290610f1890849061222d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610f46908490612244565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031614156110095760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161055d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61107f8161080d565b6001600160a01b0316336001600160a01b031614610c485760405162461bcd60e51b81526020600482015260026024820152614f4f60f01b604482015260640161055d565b6110cf848484610e00565b6110db848484846114cc565b6109b15760405162461bcd60e51b815260040161055d9061225c565b60006111028261080d565b905061111081600084611414565b61111b600083610c9b565b6001600160a01b038116600090815260036020526040812080546001929061114490849061222d565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600a602052604090206060906111ea9060028101906003016111c4856115ca565b6040516020016111d693929190612348565b60405160208183030381529060405261170a565b6040516020016111fa91906123f6565b6040516020818303038152906040529050919050565b604080516101408101825260006101208201818152825282516020818101855282825283015291810161124284611870565b604051602001611252919061243b565b60405160208183030381529060405281526020016040518060600160405280602e81526020016139d9602e913981526020016112996112946101695a8761196e565b611870565b81526020016112ae611294610169428761196e565b81526020016112c3611294610169438761196e565b81526020016112d8611294610169458761196e565b81526020016112ed6112946101693a8761196e565b90526000838152600a60209081526040909120825180519394508493919261131a92849290910190611cf6565b5060208281015180516113339260018501920190611cf6565b506040820151805161134f916002840191602090910190611cf6565b506060820151805161136b916003840191602090910190611cf6565b5060808201518051611387916004840191602090910190611cf6565b5060a082015180516113a3916005840191602090910190611cf6565b5060c082015180516113bf916006840191602090910190611cf6565b5060e082015180516113db916007840191602090910190611cf6565b5061010082015180516113f8916008840191602090910190611cf6565b5090505061140683836119cb565b610693600c80546001019055565b6001600160a01b03831661146f5761146a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611492565b816001600160a01b0316836001600160a01b0316146114925761149283826119e5565b6001600160a01b0382166114a95761069381611a82565b826001600160a01b0316826001600160a01b031614610693576106938282611b31565b60006001600160a01b0384163b156115bf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061151090339089908890889060040161246c565b6020604051808303816000875af192505050801561154b575060408051601f3d908101601f191682019092526115489181019061249f565b60015b6115a5573d808015611579576040519150601f19603f3d011682016040523d82523d6000602084013e61157e565b606091505b50805161159d5760405162461bcd60e51b815260040161055d9061225c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610df8565b506001949350505050565b6000818152600a602090815260408083209051606093926115f3926007019182918291016124bc565b60408051601f198184030181528282526000868152600a60209081529281209194509261162c9260079092019182918291829101612e38565b60408051601f198184030181529181526000868152600a6020529081209192509060080161165986611870565b6000878152600a60209081526040918290209151611686949392600481019283926005909201910161308a565b60408051601f198184030181528282526000888152600a6020908152928120919450926116be926005830192600601918291016136f1565b6040516020818303038152906040529050838383836040516020016116e694939291906138ce565b60405160208183030381529060405294506117008561170a565b9695505050505050565b606081516000141561172a57505060408051602081019091526000815290565b600060405180606001604052806040815260200161399960409139905060006003845160026117599190612244565b611763919061393b565b61176e90600461394f565b9050600061177d826020612244565b67ffffffffffffffff81111561179557611795611f26565b6040519080825280601f01601f1916602001820160405280156117bf576020820181803683370190505b509050818152600183018586518101602084015b8183101561182b576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253506001016117d3565b600389510660018114611845576002811461185657611862565b613d3d60f01b600119830152611862565b603d60f81b6000198301525b509398975050505050505050565b6060816118945750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118be57806118a881612212565b91506118b79050600a8361393b565b9150611898565b60008167ffffffffffffffff8111156118d9576118d9611f26565b6040519080825280601f01601f191660200182016040528015611903576020820181803683370190505b5090505b8415610df85761191860018361222d565b9150611925600a8661396e565b611930906030612244565b60f81b818381518110611945576119456121e6565b60200101906001600160f81b031916908160001a905350611967600a8661393b565b9450611907565b604080514260208201526bffffffffffffffffffffffff193360601b1691810191909152605481018390526074810182905260009084906094016040516020818303038152906040528051906020012060001c610df8919061396e565b610925828260405180602001604052806000815250611b75565b600060016119f284610884565b6119fc919061222d565b600083815260076020526040902054909150808214611a4f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611a949060019061222d565b60008381526009602052604081205460088054939450909284908110611abc57611abc6121e6565b906000526020600020015490508060088381548110611add57611add6121e6565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611b1557611b15613982565b6001900381819060005260206000200160009055905550505050565b6000611b3c83610884565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b611b7f8383611ba8565b611b8c60008484846114cc565b6106935760405162461bcd60e51b815260040161055d9061225c565b6001600160a01b038216611bfe5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161055d565b6000818152600260205260409020546001600160a01b031615611c635760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161055d565b611c6f60008383611414565b6001600160a01b0382166000908152600360205260408120805460019290611c98908490612244565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611d0290612160565b90600052602060002090601f016020900481019282611d245760008555611d6a565b82601f10611d3d57805160ff1916838001178555611d6a565b82800160010185558215611d6a579182015b82811115611d6a578251825591602001919060010190611d4f565b50611d76929150611d7a565b5090565b5b80821115611d765760008155600101611d7b565b6001600160e01b031981168114610c4857600080fd5b600060208284031215611db757600080fd5b8135611dc281611d8f565b9392505050565b60005b83811015611de4578181015183820152602001611dcc565b838111156109b15750506000910152565b60008151808452611e0d816020860160208601611dc9565b601f01601f19169290920160200192915050565b602081526000611dc26020830184611df5565b600060208284031215611e4657600080fd5b5035919050565b80356001600160a01b0381168114611e6457600080fd5b919050565b60008060408385031215611e7c57600080fd5b611e8583611e4d565b946020939093013593505050565b600080600060608486031215611ea857600080fd5b611eb184611e4d565b9250611ebf60208501611e4d565b9150604084013590509250925092565b600060208284031215611ee157600080fd5b611dc282611e4d565b60008060408385031215611efd57600080fd5b611f0683611e4d565b915060208301358015158114611f1b57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611f5757611f57611f26565b604051601f8501601f19908116603f01168101908282118183101715611f7f57611f7f611f26565b81604052809350858152868686011115611f9857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611fc357600080fd5b611dc283833560208501611f3c565b600080600060608486031215611fe757600080fd5b83359250602084013567ffffffffffffffff8082111561200657600080fd5b61201287838801611fb2565b9350604086013591508082111561202857600080fd5b5061203586828701611fb2565b9150509250925092565b6000806000806080858703121561205557600080fd5b61205e85611e4d565b935061206c60208601611e4d565b925060408501359150606085013567ffffffffffffffff81111561208f57600080fd5b8501601f810187136120a057600080fd5b6120af87823560208401611f3c565b91505092959194509250565b6040815260006120ce6040830185611df5565b82810360208401526120e08185611df5565b95945050505050565b600080604083850312156120fc57600080fd5b61210583611e4d565b915061211360208401611e4d565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561215457835183529284019291840191600101612138565b50909695505050505050565b600181811c9082168061217457607f821691505b60208210811415610bf457634e487b7160e01b600052602260045260246000fd5b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612226576122266121fc565b5060010190565b60008282101561223f5761223f6121fc565b500390565b60008219821115612257576122576121fc565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c90808316806122c857607f831692505b60208084108214156122ea57634e487b7160e01b600052602260045260246000fd5b8180156122fe576001811461230f5761233c565b60ff1986168952848901965061233c565b60008881526020902060005b868110156123345781548b82015290850190830161231b565b505084890196505b50505050505092915050565b683d913730b6b2911d1160b91b8152600061236660098301866122ae565b71111610113232b9b1b934b83a34b7b7111d1160711b815261238b60128201866122ae565b6c1116101134b6b0b3b2911d101160991b81527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600d82015284519091506123da816027840160208801611dc9565b61227d60f01b6027929091019182015260290195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161242e81601d850160208701611dc9565b91909101601d0192915050565b6850657273697374202360b81b81526000825161245f816009850160208701611dc9565b9190910160090192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061170090830184611df5565b6000602082840312156124b157600080fd5b8151611dc281611d8f565b7f3c7376672077696474683d2237393022206865696768743d223830362220766981527f6577426f783d223020302037393020383036222066696c6c3d226e6f6e65222060208201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660408201527f67223e3c6d61736b2069643d22706174682d312d696e736964652d315f37313560608201527f5f3832222066696c6c3d227768697465223e3c7265637420783d22313534222060808201527f793d22373234222077696474683d2231363422206865696768743d223832222060a08201526f393c1e91191811179f1e17b6b0b9b59f60811b60c08201527f3c7265637420783d223135342220793d22373234222077696474683d2231363460d08201527f22206865696768743d223832222072783d223230222066696c6c3d2268736c2860f082015260006120e0612e0f612e09612dab6127e561277961277361272461269961262d6101108c018f6122ae565b7f2c20313030252c203830252922207374726f6b653d22626c61636b222073747281527f6f6b652d77696474683d22353022206d61736b3d2275726c2823706174682d3160208201527316b4b739b4b2329698af9b989aaf9c191491179f60611b604082015260540190565b7f3c6d61736b2069643d22706174682d322d696e736964652d325f3731355f383281527f222066696c6c3d227768697465223e3c7265637420783d223530312220793d2260208201527f373234222077696474683d2231363422206865696768743d223832222072783d60408201526c11191811179f1e17b6b0b9b59f60991b6060820152606d0190565b7f3c7265637420783d223530312220793d22373234222077696474683d2231363481527f22206865696768743d223832222072783d223230222066696c6c3d2268736c28602082015260400190565b8a6122ae565b7f2c20313030252c203830252922207374726f6b653d22626c61636b222073747281527f6f6b652d77696474683d22353022206d61736b3d2275726c2823706174682d3260208201527316b4b739b4b23296992f9b989aaf9c191491179f60611b604082015260540190565b7f3c672066696c7465723d2275726c282366696c746572305f645f3731355f383281527f29223e3c7265637420783d223336222077696474683d2237353022206865696760208201527f68743d22373530222072783d223735222066696c6c3d2275726c28237061696e60408201527f74305f6c696e6561725f3731355f383229222073686170652d72656e6465726960608201527f6e673d2263726973704564676573222f3e3c7265637420783d2235332e35222060808201527f793d2231372e35222077696474683d2237313522206865696768743d2237313560a08201527f222072783d2235372e3522207374726f6b653d22626c61636b22207374726f6b60c08201527f652d77696474683d223335222073686170652d72656e646572696e673d22637260e08201527f6973704564676573222f3e3c2f673e3c7265637420783d223135332e352220796101008201527f3d223131372e35222077696474683d2235313522206865696768743d223531356101208201527f222072783d2235372e35222066696c6c3d2275726c28237061696e74315f6c696101408201527f6e6561725f3731355f38322922207374726f6b653d22626c61636b22207374726101608201527f6f6b652d77696474683d223335222f3e3c636972636c652063783d22343131226101808201527f2063793d223337352220723d223133322e35222066696c6c3d2275726c2823706101a08201527f61696e74325f72616469616c5f3731355f38322922207374726f6b653d22626c6101c08201527f61636b22207374726f6b652d77696474683d223335222f3e3c636972636c65206101e08201527f63783d22343131222063793d223337352220723d223435222066696c6c3d22626102008201527f6c61636b222f3e3c6c696e652078313d223431302e35222079313d223336322e6102208201527f35222078323d223431302e35222079323d223230372e3522207374726f6b653d6102408201527f22626c61636b22207374726f6b652d77696474683d22323522207374726f6b656102608201527f2d6c696e656361703d22726f756e64222f3e3c6c696e652078313d2231322e356102808201527f222079313d223236332e35222078323d2231322e35222079323d223131382e356102a08201527f22207374726f6b653d22626c61636b22207374726f6b652d77696474683d22326102c08201527f3522207374726f6b652d6c696e656361703d22726f756e64222f3e3c6c696e656102e08201527f2078313d2231322e35222079313d223631382e35222078323d2231322e3522206103008201527f79323d223437332e3522207374726f6b653d22626c61636b22207374726f6b656103208201527f2d77696474683d22323522207374726f6b652d6c696e656361703d22726f756e6103408201527f64222f3e3c6c696e652078313d223430362e333039222079313d223338372e306103608201527f3735222078323d223237322e303735222079323d223436342e353735222073746103808201527f726f6b653d22626c61636b22207374726f6b652d77696474683d2232352220736103a08201527f74726f6b652d6c696e656361703d22726f756e64222f3e3c6c696e652078313d6103c08201527f223534392e383039222079313d223436342e353735222078323d223431352e356103e08201527f3735222079323d223338372e30373522207374726f6b653d22626c61636b22206104008201527f7374726f6b652d77696474683d22323522207374726f6b652d6c696e656361706104208201527f3d22726f756e64222f3e3c656c6c697073652063783d223138342e35222063796104408201527f3d223134392e353031222072783d2238372e34343139222072793d2238372e346104608201527f343222207472616e73666f726d3d22726f74617465282d38392e3936322031386104808201527f342e35203134392e35303129222066696c6c3d2223303130313031222f3e00006104a08201526104be0190565b7f3c6c696e652078313d223136312e373938222079313d223136372e393032222081527f78323d223138362e323835222079323d223231302e33313622207374726f6b6560208201526507a44d0e6d8560d31b604082015260460190565b856122ae565b7f2c20313030252c203630252922207374726f6b652d77696474683d2234222f3e815260200190565b7f3c6c696e652078313d223230392e313238222079313d223136352e373831222081527f78323d223138342e3634222079323d223230382e31393522207374726f6b653d602082015264044d0e6d8560db1b60408201526000612e9e60458301876122ae565b7f2c20313030252c203630252922207374726f6b652d77696474683d2234222f3e8082527f3c6c696e652078313d223133382e393935222079313d223136362e383037222060208301527f78323d223232392e383839222079323d223136362e38303422207374726f6b6560408301526507a44d0e6d8560d31b6060830152612f2a60668301886122ae565b9081527f3c7061746820643d224d3136312e323433203136362e3934334c3133372e383560208201527f33203132362e3432394c3136312e3234332038352e393136483230382e30323460408201527f4c3233312e343135203132362e3432394c3230382e303234203136362e39343360608201527f483136312e3234335a22207374726f6b653d2268736c280000000000000000006080820152905061307f612e0f613079612fde82609786018a6122ae565b7f3c7061746820643d224d3136312e323433203230392e3332324c3133372e383581527f33203136382e3830384c3136312e323433203132382e323935483230382e303260208201527f344c3233312e343135203136382e3830384c3230382e303234203230392e333260408201527f32483136312e3234335a22207374726f6b653d2268736c280000000000000000606082015260780190565b866122ae565b979650505050505050565b7f3c7465787420746578742d616e63686f723d226d6964646c652220666f6e742d81527f66616d696c793d22436f7572696572204e65772220666f6e742d73697a653d2260208201527f33302220783d223530252220793d22383625222066696c6c3d2268736c28000060408201526000613108605e8301886122ae565b7f2c20313030252c2036302529223e4341524150414345205045525349535420238152865161313e816020840160208b01611dc9565b661e17ba32bc3a1f60c91b910160208101919091527f3c646566733e3c66696c7465722069643d2266696c746572305f645f3731355f60278201527f38322220783d2233322220793d2230222077696474683d22373538222068656960478201527f6768743d22373538222066696c746572556e6974733d2275736572537061636560678201527f4f6e5573652220636f6c6f722d696e746572706f6c6174696f6e2d66696c746560878201527f72733d2273524742223e3c6665466c6f6f6420666c6f6f642d6f70616369747960a78201527f3d22302220726573756c743d224261636b67726f756e64496d6167654669782260c78201527f2f3e3c6665436f6c6f724d617472697820696e3d22536f75726365416c70686160e78201527f2220747970653d226d6174726978222076616c7565733d2230203020302030206101078201527f30203020302030203020302030203020302030203020302030203020313237206101278201527f302220726573756c743d2268617264416c706861222f3e3c66654f66667365746101478201527f2064793d2234222f3e3c6665476175737369616e426c757220737464446576696101678201527f6174696f6e3d2232222f3e3c6665436f6d706f7369746520696e323d226861726101878201527f64416c70686122206f70657261746f723d226f7574222f3e3c6665436f6c6f726101a78201527f4d617472697820747970653d226d6174726978222076616c7565733d223020306101c78201527f20302030203020302030203020302030203020302030203020302030203020306101e78201527f20302e32352030222f3e3c6665426c656e64206d6f64653d226e6f726d616c226102078201527f20696e323d224261636b67726f756e64496d6167654669782220726573756c746102278201527f3d22656666656374315f64726f70536861646f775f3731355f3832222f3e3c666102478201527f65426c656e64206d6f64653d226e6f726d616c2220696e3d22536f75726365476102678201527f7261706869632220696e323d22656666656374315f64726f70536861646f775f6102878201527f3731355f38322220726573756c743d227368617065222f3e00000000000000006102a78201527f3c2f66696c7465723e3c6c696e6561724772616469656e742069643d227061696102bf8201527f6e74305f6c696e6561725f3731355f3832222078313d22343131222079313d226102df8201527f30222078323d22343131222079323d2237353022206772616469656e74556e696102ff820152733a399e913ab9b2b929b830b1b2a7b72ab9b2911f60611b61031f8201526136e56136bc6130796136816135e66135b16135ab61357861355d6135576103338b0175078e6e8dee040e6e8dee05ac6ded8dee47a44d0e6d8560531b815260160190565b8f6122ae565b6e16101898181296101c18129491179f60891b8152600f0190565b7f3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2268736c8152600560fb1b602082015260210190565b8b6122ae565b7f2c20313030252c2038302529222073746f702d6f7061636974793d22302e323681526211179f60e91b602082015260230190565b7f3c2f6c696e6561724772616469656e743e3c6c696e6561724772616469656e7481527f2069643d227061696e74315f6c696e6561725f3731355f3832222078313d223460208201527f3131222079313d22313030222078323d22343131222079323d2236353022206760408201527f72616469656e74556e6974733d227573657253706163654f6e557365223e00006060820152607e0190565b7f3c73746f70206f66667365743d22302e30363534373631222073746f702d636f8152680d8dee47a44d0e6d8560bb1b602082015260290190565b7f2c20313030252c2038302529222073746f702d6f7061636974793d2230222f3e815260200190565b98975050505050505050565b7f3c73746f70206f66667365743d22302e393932353539222073746f702d636f6c81526000670dee47a44d0e6d8560c31b80602084015261373560288401876122ae565b6e16101898181296101c18129491179f60891b81527f3c2f6c696e6561724772616469656e743e3c72616469616c4772616469656e74600f8201527f2069643d227061696e74325f72616469616c5f3731355f3832222063783d2230602f8201527f222063793d22302220723d223122206772616469656e74556e6974733d227573604f8201527f657253706163654f6e55736522206772616469656e745472616e73666f726d3d606f8201527f227472616e736c61746528343131203337352920726f74617465283930292073608f8201526a31b0b63294189a9814911f60a91b60af8201527f3c73746f70206f66667365743d22302e323538313834222073746f702d636f6c60ba82015260da810182905261307f6138a561355d61389f6138656136bc60e287018c6122ae565b7f3c73746f70206f66667365743d22302e393530383933222073746f702d636f6c8152670dee47a44d0e6d8560c31b602082015260280190565b886122ae565b7f3c2f72616469616c4772616469656e743e3c2f646566733e3c2f7376673e00008152601e0190565b600085516138e0818460208a01611dc9565b8551908301906138f4818360208a01611dc9565b8551910190613907818360208901611dc9565b845191019061391a818360208801611dc9565b019695505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261394a5761394a613925565b500490565b6000816000190483118215151615613969576139696121fc565b500290565b60008261397d5761397d613925565b500690565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f43617261706163652070657273697374656e74206469676974616c206173736574732070726f74656374696f6e2ea264697066735822122023367e6a3778fd323c0d12139a3468a45446e302cfd553fc54ccc6614401735064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "s ERC721 tokenURI default function",
        "params": {
          "_tokenId": "Vault ID"
        },
        "returns": {
          "_0": "_tokenURI String that contains the standard metadata for the token ID"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "??? To be documented",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createUpload()": {
        "notice": "??? To be documented"
      },
      "deleteFile(uint256)": {
        "notice": "??? To be documented it is not possible to delete files from Arweave burning NFT (the key) it is impossible to decipher the file data "
      },
      "getUploadInfo(uint256)": {
        "notice": "??? To be documented"
      },
      "getUploadsOfOwner(address)": {
        "notice": "??? To be documented"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the token URI for the NFT (vault) with standardized data"
      },
      "updateUpload(uint256,string,string)": {
        "notice": "??? To be documented"
      }
    },
    "notice": "??? To be documented",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1014,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1018,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1021,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1025,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2179,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "persistUploads",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(persistParams)2174_storage)"
      },
      {
        "astId": 2182,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "minUploadtPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2185,
        "contract": "contracts/CarapacePersist.sol:CarapacePersist",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)1718_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(persistParams)2174_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CarapacePersist.persistParams)",
        "numberOfBytes": "32",
        "value": "t_struct(persistParams)2174_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1718_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1717,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(persistParams)2174_storage": {
        "encoding": "inplace",
        "label": "struct CarapacePersist.persistParams",
        "members": [
          {
            "astId": 2157,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "url",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2159,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "uploadDescription",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2161,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "nftName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2163,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "nftDescription",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2165,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "bigSqrHue",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2167,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "smallSqrHue",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2169,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "circleHue",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2171,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "feetHue",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 2173,
            "contract": "contracts/CarapacePersist.sol:CarapacePersist",
            "label": "textHue",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}